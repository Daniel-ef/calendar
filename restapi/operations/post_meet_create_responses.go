// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"calendar/models"
)

// PostMeetCreateOKCode is the HTTP code returned for type PostMeetCreateOK
const PostMeetCreateOKCode int = 200

/*PostMeetCreateOK Ok

swagger:response postMeetCreateOK
*/
type PostMeetCreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.MeetCreateResponse `json:"body,omitempty"`
}

// NewPostMeetCreateOK creates PostMeetCreateOK with default headers values
func NewPostMeetCreateOK() *PostMeetCreateOK {

	return &PostMeetCreateOK{}
}

// WithPayload adds the payload to the post meet create o k response
func (o *PostMeetCreateOK) WithPayload(payload *models.MeetCreateResponse) *PostMeetCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post meet create o k response
func (o *PostMeetCreateOK) SetPayload(payload *models.MeetCreateResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMeetCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMeetCreateBadRequestCode is the HTTP code returned for type PostMeetCreateBadRequest
const PostMeetCreateBadRequestCode int = 400

/*PostMeetCreateBadRequest Creation failed

swagger:response postMeetCreateBadRequest
*/
type PostMeetCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostMeetCreateBadRequest creates PostMeetCreateBadRequest with default headers values
func NewPostMeetCreateBadRequest() *PostMeetCreateBadRequest {

	return &PostMeetCreateBadRequest{}
}

// WithPayload adds the payload to the post meet create bad request response
func (o *PostMeetCreateBadRequest) WithPayload(payload *models.ErrorResponse) *PostMeetCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post meet create bad request response
func (o *PostMeetCreateBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMeetCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
