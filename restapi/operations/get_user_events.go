// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserEventsHandlerFunc turns a function with the right signature into a get user events handler
type GetUserEventsHandlerFunc func(GetUserEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserEventsHandlerFunc) Handle(params GetUserEventsParams) middleware.Responder {
	return fn(params)
}

// GetUserEventsHandler interface for that can handle valid get user events params
type GetUserEventsHandler interface {
	Handle(GetUserEventsParams) middleware.Responder
}

// NewGetUserEvents creates a new http.Handler for the get user events operation
func NewGetUserEvents(ctx *middleware.Context, handler GetUserEventsHandler) *GetUserEvents {
	return &GetUserEvents{Context: ctx, Handler: handler}
}

/* GetUserEvents swagger:route GET /user_events getUserEvents

GetUserEvents get user events API

*/
type GetUserEvents struct {
	Context *middleware.Context
	Handler GetUserEventsHandler
}

func (o *GetUserEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
