// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMeetInfoHandlerFunc turns a function with the right signature into a get meet info handler
type GetMeetInfoHandlerFunc func(GetMeetInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMeetInfoHandlerFunc) Handle(params GetMeetInfoParams) middleware.Responder {
	return fn(params)
}

// GetMeetInfoHandler interface for that can handle valid get meet info params
type GetMeetInfoHandler interface {
	Handle(GetMeetInfoParams) middleware.Responder
}

// NewGetMeetInfo creates a new http.Handler for the get meet info operation
func NewGetMeetInfo(ctx *middleware.Context, handler GetMeetInfoHandler) *GetMeetInfo {
	return &GetMeetInfo{Context: ctx, Handler: handler}
}

/* GetMeetInfo swagger:route GET /meet/info getMeetInfo

GetMeetInfo get meet info API

*/
type GetMeetInfo struct {
	Context *middleware.Context
	Handler GetMeetInfoHandler
}

func (o *GetMeetInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMeetInfoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
