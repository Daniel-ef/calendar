// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUsersCreateHandlerFunc turns a function with the right signature into a post users create handler
type PostUsersCreateHandlerFunc func(PostUsersCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersCreateHandlerFunc) Handle(params PostUsersCreateParams) middleware.Responder {
	return fn(params)
}

// PostUsersCreateHandler interface for that can handle valid post users create params
type PostUsersCreateHandler interface {
	Handle(PostUsersCreateParams) middleware.Responder
}

// NewPostUsersCreate creates a new http.Handler for the post users create operation
func NewPostUsersCreate(ctx *middleware.Context, handler PostUsersCreateHandler) *PostUsersCreate {
	return &PostUsersCreate{Context: ctx, Handler: handler}
}

/* PostUsersCreate swagger:route POST /users/create postUsersCreate

PostUsersCreate post users create API

*/
type PostUsersCreate struct {
	Context *middleware.Context
	Handler PostUsersCreateHandler
}

func (o *PostUsersCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUsersCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
