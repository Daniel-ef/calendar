// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostEventRoomCreateHandlerFunc turns a function with the right signature into a post event room create handler
type PostEventRoomCreateHandlerFunc func(PostEventRoomCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostEventRoomCreateHandlerFunc) Handle(params PostEventRoomCreateParams) middleware.Responder {
	return fn(params)
}

// PostEventRoomCreateHandler interface for that can handle valid post event room create params
type PostEventRoomCreateHandler interface {
	Handle(PostEventRoomCreateParams) middleware.Responder
}

// NewPostEventRoomCreate creates a new http.Handler for the post event room create operation
func NewPostEventRoomCreate(ctx *middleware.Context, handler PostEventRoomCreateHandler) *PostEventRoomCreate {
	return &PostEventRoomCreate{Context: ctx, Handler: handler}
}

/* PostEventRoomCreate swagger:route POST /event/room/create postEventRoomCreate

PostEventRoomCreate post event room create API

*/
type PostEventRoomCreate struct {
	Context *middleware.Context
	Handler PostEventRoomCreateHandler
}

func (o *PostEventRoomCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostEventRoomCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostEventRoomCreateBody post event room create body
//
// swagger:model PostEventRoomCreateBody
type PostEventRoomCreateBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post event room create body
func (o *PostEventRoomCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostEventRoomCreateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post event room create body based on context it is used
func (o *PostEventRoomCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostEventRoomCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEventRoomCreateBody) UnmarshalBinary(b []byte) error {
	var res PostEventRoomCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostEventRoomCreateOKBody post event room create o k body
//
// swagger:model PostEventRoomCreateOKBody
type PostEventRoomCreateOKBody struct {

	// room id
	// Required: true
	RoomID *string `json:"room_id"`
}

// Validate validates this post event room create o k body
func (o *PostEventRoomCreateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostEventRoomCreateOKBody) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("postEventRoomCreateOK"+"."+"room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post event room create o k body based on context it is used
func (o *PostEventRoomCreateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostEventRoomCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEventRoomCreateOKBody) UnmarshalBinary(b []byte) error {
	var res PostEventRoomCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
