// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Accepted accepted
//
// swagger:model Accepted
type Accepted string

func NewAccepted(value Accepted) *Accepted {
	v := value
	return &v
}

const (

	// AcceptedYes captures enum value "yes"
	AcceptedYes Accepted = "yes"

	// AcceptedNo captures enum value "no"
	AcceptedNo Accepted = "no"

	// AcceptedMaybe captures enum value "maybe"
	AcceptedMaybe Accepted = "maybe"
)

// for schema
var acceptedEnum []interface{}

func init() {
	var res []Accepted
	if err := json.Unmarshal([]byte(`["yes","no","maybe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		acceptedEnum = append(acceptedEnum, v)
	}
}

func (m Accepted) validateAcceptedEnum(path, location string, value Accepted) error {
	if err := validate.EnumCase(path, location, value, acceptedEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this accepted
func (m Accepted) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAcceptedEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this accepted based on context it is used
func (m Accepted) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
