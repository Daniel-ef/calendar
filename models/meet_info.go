// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MeetInfo meet info
//
// swagger:model MeetInfo
type MeetInfo struct {

	// creator
	// Required: true
	Creator *string `json:"creator"`

	// description
	Description string `json:"description,omitempty"`

	// meeting link
	MeetingLink string `json:"meeting_link,omitempty"`

	// meeting room
	MeetingRoom string `json:"meeting_room,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// notifications
	Notifications []*Notification `json:"notifications"`

	// participants
	// Min Items: 1
	Participants []string `json:"participants"`

	// time end
	// Required: true
	// Format: date-time
	TimeEnd *strfmt.DateTime `json:"time_end"`

	// time start
	// Required: true
	// Format: date-time
	TimeStart *strfmt.DateTime `json:"time_start"`
}

// Validate validates this meet info
func (m *MeetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeetInfo) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	return nil
}

func (m *MeetInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MeetInfo) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Notifications); i++ {
		if swag.IsZero(m.Notifications[i]) { // not required
			continue
		}

		if m.Notifications[i] != nil {
			if err := m.Notifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeetInfo) validateParticipants(formats strfmt.Registry) error {
	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	iParticipantsSize := int64(len(m.Participants))

	if err := validate.MinItems("participants", "body", iParticipantsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *MeetInfo) validateTimeEnd(formats strfmt.Registry) error {

	if err := validate.Required("time_end", "body", m.TimeEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("time_end", "body", "date-time", m.TimeEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MeetInfo) validateTimeStart(formats strfmt.Registry) error {

	if err := validate.Required("time_start", "body", m.TimeStart); err != nil {
		return err
	}

	if err := validate.FormatOf("time_start", "body", "date-time", m.TimeStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this meet info based on the context it is used
func (m *MeetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeetInfo) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notifications); i++ {

		if m.Notifications[i] != nil {
			if err := m.Notifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeetInfo) UnmarshalBinary(b []byte) error {
	var res MeetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
