// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
//
// swagger:model Notification
type Notification struct {

	// Minutes before meeting start
	// Required: true
	BeforeStart *int64 `json:"before_start"`

	// notification type
	// Required: true
	// Enum: [email sms telegram]
	NotificationType *string `json:"notification_type"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeforeStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateBeforeStart(formats strfmt.Registry) error {

	if err := validate.Required("before_start", "body", m.BeforeStart); err != nil {
		return err
	}

	return nil
}

var notificationTypeNotificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","sms","telegram"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeNotificationTypePropEnum = append(notificationTypeNotificationTypePropEnum, v)
	}
}

const (

	// NotificationNotificationTypeEmail captures enum value "email"
	NotificationNotificationTypeEmail string = "email"

	// NotificationNotificationTypeSms captures enum value "sms"
	NotificationNotificationTypeSms string = "sms"

	// NotificationNotificationTypeTelegram captures enum value "telegram"
	NotificationNotificationTypeTelegram string = "telegram"
)

// prop value enum
func (m *Notification) validateNotificationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeNotificationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateNotificationType(formats strfmt.Registry) error {

	if err := validate.Required("notification_type", "body", m.NotificationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNotificationTypeEnum("notification_type", "body", *m.NotificationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification based on context it is used
func (m *Notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
