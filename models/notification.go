// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
//
// swagger:model Notification
type Notification struct {

	// before start
	// Required: true
	// Minimum: 1
	BeforeStart *int64 `json:"before_start"`

	// method
	// Required: true
	// Enum: [email sms telegram]
	Method *string `json:"method"`

	// step
	// Required: true
	// Enum: [m h d w]
	Step *string `json:"step"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeforeStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateBeforeStart(formats strfmt.Registry) error {

	if err := validate.Required("before_start", "body", m.BeforeStart); err != nil {
		return err
	}

	if err := validate.MinimumInt("before_start", "body", *m.BeforeStart, 1, false); err != nil {
		return err
	}

	return nil
}

var notificationTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","sms","telegram"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeMethodPropEnum = append(notificationTypeMethodPropEnum, v)
	}
}

const (

	// NotificationMethodEmail captures enum value "email"
	NotificationMethodEmail string = "email"

	// NotificationMethodSms captures enum value "sms"
	NotificationMethodSms string = "sms"

	// NotificationMethodTelegram captures enum value "telegram"
	NotificationMethodTelegram string = "telegram"
)

// prop value enum
func (m *Notification) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

var notificationTypeStepPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["m","h","d","w"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeStepPropEnum = append(notificationTypeStepPropEnum, v)
	}
}

const (

	// NotificationStepM captures enum value "m"
	NotificationStepM string = "m"

	// NotificationStepH captures enum value "h"
	NotificationStepH string = "h"

	// NotificationStepD captures enum value "d"
	NotificationStepD string = "d"

	// NotificationStepW captures enum value "w"
	NotificationStepW string = "w"
)

// prop value enum
func (m *Notification) validateStepEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationTypeStepPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateStep(formats strfmt.Registry) error {

	if err := validate.Required("step", "body", m.Step); err != nil {
		return err
	}

	// value enum
	if err := m.validateStepEnum("step", "body", *m.Step); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification based on context it is used
func (m *Notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
